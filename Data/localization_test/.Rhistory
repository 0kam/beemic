q()
setwd("~/Projects/SpresenseOutdoorMicArray/power_consumption/")
library(tidyverse)
list.files("csv/", ".csv", full.names = T)
list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv() %>%
mutate(file_name = p)
}) %>%
reduce(rbind)
list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = p)
}) %>%
reduce(rbind)
read_csv(p)
list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = p) %>%
select()
})
list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = p) %>%
select(`Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind)
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = p) %>%
select(`Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
)
df
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = p) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
)
df
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = basename(p)) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
)
df
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = basename(p)) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
) %>%
mutate(
n_channels = str_extract(file_name, "\\d{2,3}")
)
df
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = basename(p)) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
) %>%
mutate(
n_ch = str_sub(file_name, 1,1)
sr = str_extract(file_name, "\\d{2,3}"),
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = basename(p)) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
) %>%
mutate(
n_ch = str_sub(file_name, 1,1),
sr = str_extract(file_name, "\\d{2,3}"),
)
df
df$n_ch
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = basename(p)) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
) %>%
mutate(
n_ch = str_sub(file_name, 1,1) %>% as.factor(),
sr = str_extract(file_name, "\\d{2,3}") %>% as.factor(),
)
df
df
df$n_ch %>% unique()
df$st %>% unique()
df$sr %>% unique()\
df$sr %>% unique()
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = basename(p)) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
) %>%
mutate(
n_ch = str_sub(file_name, 1,1) %>% as.integer(),
sr = str_extract(file_name, "\\d{2,3}") %>% as.integer(),
)
df <- list.files("csv/", ".csv", full.names = T) %>%
map(function(p){
read_csv(p) %>%
mutate(file_name = basename(p)) %>%
select(file_name, `Timestamp(ms)`, `Current(uA)`)
}) %>%
reduce(rbind) %>%
rename(
time_stamp = `Timestamp(ms)`,
current = `Current(uA)`
) %>%
mutate(
n_ch = str_sub(file_name, 1,1) %>% as.integer(),
sr = str_extract(file_name, "\\d{2,3}") %>% as.integer(),
) %>%
select(-file_name)
df
df %>% ggplot(aes(x = current)) +
geom_histogram()
th_rec = 750 * 1000 # threshold to extract recording current, uA
th_sleep = 5 * 1000 # threshold to extract sleeping current, uA
summarise(
mean_recording_current = mean(current)
)
df %>%
filter(current > th_rec) %>%
group_by(n_ch, sr)
df %>%
filter(current > th_rec) %>%
group_by(n_ch, sr) %>%
summarise(
mean_recording_current = mean(current)
)
df %>%
filter(current > th_rec)
df
th_rec
df %>%
filter(current > th_sleep) %>%
group_by(n_ch, sr) %>%
summarise(
mean_recording_current = mean(current)
)
th_rec = 75 * 1000 # threshold to extract recording current, uA
th_sleep = 5 * 1000 # threshold to extract sleeping current, uA
th_rec
df %>%
filter(current > th_rec) %>%
group_by(n_ch, sr) %>%
summarise(
mean_recording_current = mean(current)
)
df %>%
filter(current > th_rec) %>%
group_by(n_ch, sr) %>%
summarise(
mean_recording_current = mean(current) / 1000
)
df %>%
filter(current < th_sleep) %>%
group_by(n_ch, sr) %>%
summarise(
mean_recording_current = mean(current) / 1000
)
df %>%
filter(n_ch == 1, sr == 16) %>%
filter(current < th_sleep) %>%
group_by(n_ch, sr) %>%
summarise(
mean_recording_current = mean(current) / 1000
)
df %>%
filter(n_ch == 1, sr == 16) %>%
filter(current < th_sleep) %>%
group_by(n_ch, sr) %>%
summarise(
mean_sleeping_current = mean(current) / 1000
)
library(tidyverse)
setwd("/home/okamoto/Projects/SpresenseOutdoorMicArray/localization_test/")
calc_point <- function(d1, d2) {
d1r <- d1 / 180 * pi
d2r <- d2 / 180 * pi
if (tan(d1r) == tan(d2r)) {
return(c(NA, NA))
}
f <- function(x) {
res = x * (tan(d2r) - tan(d1r)) + 5 * (tan(d2r) + tan(d1r))
return(res)
}
x <- try(uniroot(f, c(-1000, 1000))$root, silent = TRUE)
if (class(x) == "try-error") {
return(c(NA, NA))
}
y <- tan(d1r) * x - 5 * tan(d1r)
return(c(x, y))
}
calc_deg <- function(xm, ym, xs, ys) { # x_mic, x_source
# マイクの位置に原点を移す
x = xs - xm
y = ys - ym
# 角度計算
deg = atan(y / x) * 180 / pi
if (deg < 0) {
deg <- 180 + deg
}
return(deg)
}
df <- read_csv("scripts/2nd/doa.csv") %>%
pivot_wider(id_cols = c(condition, sound), names_from = mic, values_from = doa) %>%
mutate(
micR = as.integer(micR),
micL = as.integer(micL)
) %>%
mutate(
degree = as.numeric(str_extract(condition, "\\d*deg") %>% str_remove("deg")),
distance = as.numeric(str_extract(condition, "\\d*m") %>% str_remove("m")),
) %>%
arrange(degree, distance, sound) %>%
mutate(
true_x = sin(degree / 180 * pi) * distance,
true_y = cos(degree / 180 * pi) * distance,
) %>%
rowwise() %>%
mutate(
pred_x = calc_point(micR, micL)[1],
pred_y = calc_point(micR, micL)[2]
) %>%
mutate(
error = sqrt((true_x - pred_x)^2 + (true_y - pred_y)^2)
) %>%
mutate(
true_micR = calc_deg(5, 0, true_x, true_y),
true_micL = calc_deg(-5, 0, true_x, true_y)
) %>%
rename(
pred_micR = micR,
pred_micL = micL
) %>%
pivot_longer(
cols = c(true_x, pred_x, true_y, pred_y,
true_micR, true_micL, pred_micR, pred_micL),
names_to = c("type", ".value"),
names_sep = 5) %>%
mutate(type = str_remove(type, "_"))
df %>%
pivot_wider(id_cols = c(sound, degree, distance), names_from = c(type), values_from = c(x, y, micR, micL)) %>%
mutate(
micR_error = sqrt((micR_pred - micR_true)^2),
micL_error = sqrt((micL_pred - micL_true)^2)
) %>%
pivot_longer(c(micR_error, micL_error), values_to = "error", names_to = "mic") %>%
select(sound, degree, distance, mic, error) %>%
mutate(mic = str_remove(mic, "_error")) %>%
mutate(distance = as.factor(distance)) %>%
ggplot(aes(x = distance, y = error, fill = mic)) +
geom_boxplot() +
facet_wrap(~sound)
df %>%
group_by(distance) %>%
summarise(error = mean(error))
df %>%
pivot_wider(id_cols = c(sound, degree, distance), names_from = c(type), values_from = c(x, y, micR, micL)) %>%
mutate(
micR_bias = micR_pred - micR_true,
micL_bias = micL_pred - micL_true,
micR_error = sqrt((micR_pred - micR_true)^2),
micL_error = sqrt((micL_pred - micL_true)^2)
) %>%
select(degree, distance, micR_bias, micL_bias, micR_error, micL_error) %>%
#group_by(degree, distance) %>%
summarize_all(mean)
(2.64 + 1.77) / 2
